{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\qrgod\\\\src\\\\components\\\\QRGenerator.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from 'react';\nimport QRCode from 'qrcode';\nimport DataInput from './DataInput';\nimport StyleCustomizer from './StyleCustomizer';\nimport QRPreview from './QRPreview';\nimport DownloadButton from './DownloadButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QRGenerator = () => {\n  _s();\n  const [qrData, setQrData] = useState({\n    type: 'url',\n    content: '',\n    wifi: {\n      ssid: '',\n      password: '',\n      encryption: 'WPA'\n    },\n    contact: {\n      name: '',\n      phone: '',\n      email: '',\n      company: ''\n    }\n  });\n  const [style, setStyle] = useState({\n    size: 256,\n    foreground: '#000000',\n    background: '#FFFFFF',\n    errorCorrectionLevel: 'M',\n    logo: null\n  });\n  const [qrCodeUrl, setQrCodeUrl] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [error, setError] = useState('');\n\n  // Generate QR code data string based on type\n  const generateQRString = useCallback(() => {\n    switch (qrData.type) {\n      case 'url':\n        return qrData.content;\n      case 'text':\n        return qrData.content;\n      case 'wifi':\n        if (!qrData.wifi.ssid) return '';\n        const wifiString = `WIFI:S:${qrData.wifi.ssid};T:${qrData.wifi.encryption};P:${qrData.wifi.password};;`;\n        return wifiString;\n      case 'contact':\n        if (!qrData.contact.name) return '';\n        const contactString = `BEGIN:VCARD\\nVERSION:3.0\\nFN:${qrData.contact.name}`;\n        const phone = qrData.contact.phone ? `\\nTEL:${qrData.contact.phone}` : '';\n        const email = qrData.contact.email ? `\\nEMAIL:${qrData.contact.email}` : '';\n        const company = qrData.contact.company ? `\\nORG:${qrData.contact.company}` : '';\n        return contactString + phone + email + company + '\\nEND:VCARD';\n      default:\n        return qrData.content;\n    }\n  }, [qrData]);\n\n  // Generate QR code\n  const generateQRCode = useCallback(async () => {\n    const qrString = generateQRString();\n    if (!qrString.trim()) {\n      setQrCodeUrl('');\n      setError('');\n      return;\n    }\n    setIsGenerating(true);\n    setError('');\n    try {\n      const options = {\n        width: style.size,\n        margin: 2,\n        color: {\n          dark: style.foreground,\n          light: style.background\n        },\n        errorCorrectionLevel: style.errorCorrectionLevel\n      };\n      const url = await QRCode.toDataURL(qrString, options);\n      setQrCodeUrl(url);\n    } catch (err) {\n      setError('Failed to generate QR code. Please check your input.');\n      console.error('QR Code generation error:', err);\n    } finally {\n      setIsGenerating(false);\n    }\n  }, [generateQRString, style]);\n\n  // Generate QR code when data or style changes\n  useEffect(() => {\n    const timeoutId = setTimeout(generateQRCode, 300);\n    return () => clearTimeout(timeoutId);\n  }, [generateQRCode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-6xl mx-auto\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 lg:grid-cols-2 gap-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-6\",\n        children: [/*#__PURE__*/_jsxDEV(DataInput, {\n          qrData: qrData,\n          setQrData: setQrData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StyleCustomizer, {\n          style: style,\n          setStyle: setStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-6\",\n        children: [/*#__PURE__*/_jsxDEV(QRPreview, {\n          qrCodeUrl: qrCodeUrl,\n          isGenerating: isGenerating,\n          error: error,\n          style: style\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DownloadButton, {\n          qrCodeUrl: qrCodeUrl,\n          isGenerating: isGenerating,\n          qrData: qrData,\n          style: style\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(QRGenerator, \"fSdzA6psPMwlObX8ITUl7PrsrqM=\");\n_c = QRGenerator;\nexport default QRGenerator;\nvar _c;\n$RefreshReg$(_c, \"QRGenerator\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","QRCode","DataInput","StyleCustomizer","QRPreview","DownloadButton","jsxDEV","_jsxDEV","QRGenerator","_s","qrData","setQrData","type","content","wifi","ssid","password","encryption","contact","name","phone","email","company","style","setStyle","size","foreground","background","errorCorrectionLevel","logo","qrCodeUrl","setQrCodeUrl","isGenerating","setIsGenerating","error","setError","generateQRString","wifiString","contactString","generateQRCode","qrString","trim","options","width","margin","color","dark","light","url","toDataURL","err","console","timeoutId","setTimeout","clearTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/qrgod/src/components/QRGenerator.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport QRCode from 'qrcode';\r\nimport DataInput from './DataInput';\r\nimport StyleCustomizer from './StyleCustomizer';\r\nimport QRPreview from './QRPreview';\r\nimport DownloadButton from './DownloadButton';\r\n\r\nconst QRGenerator = () => {\r\n  const [qrData, setQrData] = useState({\r\n    type: 'url',\r\n    content: '',\r\n    wifi: {\r\n      ssid: '',\r\n      password: '',\r\n      encryption: 'WPA'\r\n    },\r\n    contact: {\r\n      name: '',\r\n      phone: '',\r\n      email: '',\r\n      company: ''\r\n    }\r\n  });\r\n\r\n  const [style, setStyle] = useState({\r\n    size: 256,\r\n    foreground: '#000000',\r\n    background: '#FFFFFF',\r\n    errorCorrectionLevel: 'M',\r\n    logo: null\r\n  });\r\n\r\n  const [qrCodeUrl, setQrCodeUrl] = useState('');\r\n  const [isGenerating, setIsGenerating] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  // Generate QR code data string based on type\r\n  const generateQRString = useCallback(() => {\r\n    switch (qrData.type) {\r\n      case 'url':\r\n        return qrData.content;\r\n      case 'text':\r\n        return qrData.content;\r\n      case 'wifi':\r\n        if (!qrData.wifi.ssid) return '';\r\n        const wifiString = `WIFI:S:${qrData.wifi.ssid};T:${qrData.wifi.encryption};P:${qrData.wifi.password};;`;\r\n        return wifiString;\r\n      case 'contact':\r\n        if (!qrData.contact.name) return '';\r\n        const contactString = `BEGIN:VCARD\\nVERSION:3.0\\nFN:${qrData.contact.name}`;\r\n        const phone = qrData.contact.phone ? `\\nTEL:${qrData.contact.phone}` : '';\r\n        const email = qrData.contact.email ? `\\nEMAIL:${qrData.contact.email}` : '';\r\n        const company = qrData.contact.company ? `\\nORG:${qrData.contact.company}` : '';\r\n        return contactString + phone + email + company + '\\nEND:VCARD';\r\n      default:\r\n        return qrData.content;\r\n    }\r\n  }, [qrData]);\r\n\r\n  // Generate QR code\r\n  const generateQRCode = useCallback(async () => {\r\n    const qrString = generateQRString();\r\n    \r\n    if (!qrString.trim()) {\r\n      setQrCodeUrl('');\r\n      setError('');\r\n      return;\r\n    }\r\n\r\n    setIsGenerating(true);\r\n    setError('');\r\n\r\n    try {\r\n      const options = {\r\n        width: style.size,\r\n        margin: 2,\r\n        color: {\r\n          dark: style.foreground,\r\n          light: style.background\r\n        },\r\n        errorCorrectionLevel: style.errorCorrectionLevel\r\n      };\r\n\r\n      const url = await QRCode.toDataURL(qrString, options);\r\n      setQrCodeUrl(url);\r\n    } catch (err) {\r\n      setError('Failed to generate QR code. Please check your input.');\r\n      console.error('QR Code generation error:', err);\r\n    } finally {\r\n      setIsGenerating(false);\r\n    }\r\n  }, [generateQRString, style]);\r\n\r\n  // Generate QR code when data or style changes\r\n  useEffect(() => {\r\n    const timeoutId = setTimeout(generateQRCode, 300);\r\n    return () => clearTimeout(timeoutId);\r\n  }, [generateQRCode]);\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto\">\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\r\n        {/* Left Column - Input and Customization */}\r\n        <div className=\"space-y-6\">\r\n          <DataInput \r\n            qrData={qrData} \r\n            setQrData={setQrData} \r\n          />\r\n          <StyleCustomizer \r\n            style={style} \r\n            setStyle={setStyle} \r\n          />\r\n        </div>\r\n\r\n        {/* Right Column - Preview and Download */}\r\n        <div className=\"space-y-6\">\r\n          <QRPreview \r\n            qrCodeUrl={qrCodeUrl}\r\n            isGenerating={isGenerating}\r\n            error={error}\r\n            style={style}\r\n          />\r\n          <DownloadButton \r\n            qrCodeUrl={qrCodeUrl}\r\n            isGenerating={isGenerating}\r\n            qrData={qrData}\r\n            style={style}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QRGenerator;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}